\input texinfo @c -*-texinfo-*-
@c Copyright (c) 2018, John Donoghue <john.donoghue@ieee.org>
@c Octave Arduino - a somewhat Matlab compatable Arduino toolkit for GNU octave.

@c For manually generating the documentation use
@c   LANGUAGE=en makeinfo --html --no-split arduino.texi

@c %*** Start of HEADER
@setfilename arduino.info
@settitle Arduino Toolkit - a somewhat Matlab compatable arduino toolkit for GNU octave.
@afourpaper
@paragraphindent 0
@finalout
@set VERSION 0.2.0
@c @afourwide
@c %*** End of the HEADER

@c The following macro is used for the on-line help system, but we don't
@c want lots of `See also: foo, bar, and baz' strings cluttering the
@c printed manual (that information should be in the supporting text for
@c each group of functions and variables).

@macro seealso {args}
@iftex
@vskip 2pt
@end iftex
@ifnottex
@c Texinfo @sp should work but in practice produces ugly results for HTML.
@c A simple blank line produces the correct behavior.
@c @sp 1

@end ifnottex
@noindent
@strong{See also:} \args\.
@end macro

@c %*** Start of TITLEPAGE
@titlepage
@title Arduino Toolkit @value{VERSION}
@subtitle  a somewhat MATLAB compatable Arduino toolkit for @acronym{GNU} Octave.
@author John Donoghue
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2018 John Donoghue

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the same conditions as for modified versions.

@page
@heading Distribution
The @acronym{GNU} Octave arduino package is @dfn{free} software.
Free software is a matter of the users' freedom to run, copy, distribute,
study, change and improve the software.
This means that everyone is free to use it and free to redistribute it
on certain conditions.  The @acronym{GNU} Octave arduino package
is not, however, in the public domain.  It is copyrighted and there are
restrictions on its distribution, but the restrictions are designed to
ensure that others will have the same freedom to use and redistribute
Octave that you have.  The precise conditions can be found in the
@acronym{GNU} General Public License that comes with the @acronym{GNU}
Octave arduino package and that also appears in @ref{Copying}.

To download a copy of the @acronym{GNU} Octave arduino package, please visit
@url{http://octave.sourceforge.net/arduino/}.

@end titlepage
@c %*** End of TITLEPAGE

@c %*** Start of BODY
@contents
@ifnottex
@node Top
@top Introduction
The Arduino toolkit is a somewhat Matlab compatable arduino toolkit for GNU octave.
@end ifnottex

@menu
* Installing and loading::    Installing and loading the Arduino toolkit
* Hardware setup::            Setting up the Arduino hardware
* Connecting to an arduino::  Making a connection to an arduino device
* Basic Input and Output Overview::    Performing basic I/O
* Protocol based I/O Overview::    Performing protocol based I/O
* Examples::                  Examples using the Arduino toolkit
* Function Reference::        Arduino toolkit functions
* Copying::                   Copying
* Index::                     Index
@end menu

@c -------------------------------------------------------------------------
@node Installing and loading
@chapter Installing and loading
@cindex Installing and loading

The Arduino toolkit must be installed and then loaded to be used.

It can be installed in @acronym{GNU} Octave directly from octave-forge,
or can be installed in an off-line mode via a downloaded tarball.

The toolkit must be then be loaded once per each @acronym{GNU} Octave session in order to use its functionalty.

@section Online Direct install
@cindex Online install
With an internet connection available, the Arduino package can be installed from
octave-forge using the following command within @acronym{GNU} Octave:

@example
pkg install -forge arduino
@end example

The latest released version of the toolkit will be downloaded and installed.

@section Off-line install
@cindex Off-line install
With the arduino toolkit package already downloaded, and in the current directory when running
@acronym{GNU} Octave, the package can be installed using the following command within @acronym{GNU} Octave:

@example
pkg install arduino-@value{VERSION}.tar.gz
@end example

@section Loading
@cindex Loading
Regardless of the method of installing the Arduino toolkit, in order to use its functions,
the toolkit must be loaded using the pkg load command:

@example
pkg load arduino
@end example

The toolkit must be loaded on each @acronym{GNU} Octave session.

@c -------------------------------------------------------------------------
@node Hardware setup
@chapter Hardware setup
@cindex Hardware setup

In order to use the arduino hardware with the toolkit, it must be programmed with
special firmware.

@section Programming the Arduino
@cindex Programming the Arduino
To program the hardware, using a default configuration, run the arduinosetup command:

@example
arduinosetup
@end example

A temporary Arduino project will be created, with the Arduino toolkit files copied to it and the Arduino IDE will open.

Set the board type and port correctly for the connected Arduino and press the upload button on the IDE.

The sources will be compiled and then uploaded to the connected arduino board.

After successful upload the Arduino IDE should be closed.

@section Known Arduino Board Types
@cindex Known Arduino Board Types
The board type must be known in order to successfully detect and connect to the Arduino board after programming.

Currently, known boards are:
@itemize @bullet
@item
Arduino UNO
@item
Arduino Mega
@item
Arduino Pro/Pro Mini
@item
Sparkfun SAMD21
@end itemize

Additional boards can be added easily, however require minor code changes.

@c -------------------------------------------------------------------------
@node Connecting to an arduino
@chapter Connecting to an arduino
@cindex Connecting to an arduino

To control an arduino device, a connection must be made to it by creating an arduino object.

@section Connecting to a single arduino
@cindex Connecting to a single arduino
Assuming a single arduino device is connected to the computer, creating an arduno object with no arguments will
find the connected arduino and connect to it:

@example
ar = arduino()
@end example

@section Connecting to a specific arduino
@cindex Connecting to a specific arduino
Where multiple arduinos may be connected to the computer, a specific board can be connected by
specifying the name of the port it is connected to:

@example
ar = arduino("/dev/ttyACM0")
@end example

The port name will be operating system dependant.

@section Querying available arduinos
@cindex Querying available arduinos
To list the ports of all @emph{programmed} available arduinos, the scanForArduinos function can be used:

@example
scanForArduinos
@end example

It will provide a list of all available boards it can find with the port they are connected to.

@c -------------------------------------------------------------------------
@node Basic Input and Output Overview
@chapter Basic Input and Output Overview
@cindex Basic Input and Output Overview

Basic input and output can be performed on a connected arduino device using by calling the read and write functions
for a specific named pin on the arduino.

A list of available pins can get found from the pins property of the connected arduio object and are also displayed
as part of the default shown properties:

@example
ar = arduino();
% get the pin names
pins = ar.availablepins
@end example

Pin generally follow a naming scheme of D<number> for digital pins and A<number> for analog pins.

Digital pins can be used to read and write digital data, but can not read analog voltages.
Analog pins can perform digital I/O as well as reading voltages.

@section Performing Digital I/O
@cindex Performing Digital I/O

A pin's digital logic value can be true (1) or false (0) and can be set using the writeDigialPin function.

The following example attempts to set the D2 pin of the connected arduini object "ar" to true, waits 5 seconds and
then sets it to false:

@example
writeDigitalPin (ar,  "d2", true);
pause 5
writeDigitalPin (ar,  "d2", false);
@end example


Using the readDigitalPin will read the current logic state of the pin.

@example
value = readDigitalPin (ar,  "d2");
@end example

@section Performing Analog Input
@cindex Performing Analog Input

For analog pins, the voltage level can be read using a analog to digital conversion and will return a voltage level
between 0 and the boards voltage (nominally 5V):

@example
value = readVoltage (ar,  "a0");
@end example


The raw digital value of the pin can also be read instead of a volatge, giving a value between 0 and 2^x where x is
the number of bits used by the analog to digtial converter.

@example
value = readAnalogPin (ar,  "a0");
@end example


@c -------------------------------------------------------------------------
@node Protocol based I/O Overview
@chapter Protocol based I/O Overview
@cindex Protocol based I/O Overview

The arduino toolkit supports more complex I/O for SPI, I2C, Servo control and more.

@section SPI communication
@cindex SPI communication

SPI communication can be performed by creating a SPI dev object and then calling the writeRead function:

@example
spi = spidev (ar,  "d2");
@end example

The function call expects a connected arduino object as the first argument, followed by the chip slelect pin of the SPI device.

After a device is created, a write to device followed by read can can be made using the writeRead function:

@example
spi = spidev (ar,  "d2");
data = writeRead (spi,  100);
@end example


@section I2C communication
@cindex I2C communication

I2C communication can be performed by creating an I2C dev object for a specific I2C address.

The following example creates an i2c device that will communicate with a I2C device at address 100"
@example
i2c = i2cdev (ar,  100);
@end example

After creating an I2C device, data can be read and writen using read, write, readRegister and writeRegister. The data to send 
and recieve will be device dependent.

@section Servo communication
@cindex Servo communication

Servo communication can be performed after creating a servo device object to operate on a PWM pin:

@example
servoobj = servo(ar, "d9", "minpulseduration", 1.0e-3, ...
  "maxpulseduration", 2e-3);
@end example

The servo function expects the connected arduino object and the PWM pin that the servo is connnected to. Optional properties 
can be specified to control the setup of device.

In the example, the min and max pulse width values are set.


Using the servo object the current position and be read or set with values ranging between 0 to 1, with 0 being the minimum 
pulse width and 1 being the maximum.

The following example sets the servo to its middle position.

@example
servoobj = servo(ar, "d9", "minpulseduration", 1.0e-3, ...
  "maxpulseduration", 2e-3);

writePosition (servoobj, 0.5);
@end example


@section Shift Registers
@cindex Shift Registers

A shift register can be controlled by creating a shiftRegister object:

@example
registerobj = shiftRegister(ar, '74hc164', "d2", "d3");
@end example

The parameters required are dependant on the type of shift register created.

Once a register object has been created, it can be read and written to using the read and write functions.

@section Rotary Encoders
@cindex Rotary Encoder

A rotary encoder can be created by creating a rotaryEncoder object.

@example
encoder = rotaryEncoder(ar, "d2", "d3", 180);
@end example

Using the created object, the rotary encoder value and speed can be read.

@c -------------------------------------------------------------------------
@node Examples
@chapter Examples
@cindex Examples

@section Blinking an LED
@cindex Linking an LED

This example shows blinking the inbuilt LED on the Arduino board. Code is available by running:
@example
edit examples/example_blink
@end example

@heading Hardware setup
This example uses in the builtin LEDS, so requires only a connection of the Arduino board to
computer for communication.

@heading Create an Arduino object

@example
ar = arduino ();
@end example

If you have more than one Arduino board connected, you may need to specify the port in order to
connect to the correct device.

@heading Query Device for pins connected to builtin LEDS

The pin connected to the Arduino UNO built in led if D13.

@example
led_pin = "d13";
@end example

The connected pins can be queried programatically if desired.

@example
pins = getLEDTerminals (ar);
@end example

Connected to a Arduino UNO would return a list pins containing only one item '13'.

The terminal number can be converted to a pin using getPinsFromTerminals:

@example
led_pin = getPinsFromTerminals (ar, pins@{1@});
@end example


@heading Turn the LED off

Write a 0 value to the pin to turn it off.

@example
writeDigitalPin (ar, led_pin, 0);
@end example

@heading Turn the LED on

Write a 1 value to the pin to turn it on

@example
writeDigitalPin (ar, led_pin, 1);
@end example

@heading Making the LED blink

Add a while loop with a pause between the changes in the pin state to blink.

@example
while true
  writeDigitalPin (ar, led_pin, 0);
  pause (0.5)
  writeDigitalPin (ar, led_pin, 1);
  pause (0.5)
endwhile
@end example

@section Using I2C to communicate with an EEPROM
@cindex Using I2C to communicate with an EEPROM

This example shows using I2C to communicate with a EEPROM chip. Code is available by running:
@example
edit examples/example_i2c_eeprom
@end example

@heading Hardware setup
Using an Arduino UNO, the board should be configured with the following connections between the board and a 24XX256 EEPROM chip:

@table @asis
@item A4
Connected to pin 5 of EEPROM
@item A5
Connected to pin 6 of EEPROM
@item 5V
Connected to pin 8 of EEPROM
@item GND
Connected to pin 1,2,3,4 of EEPROM
@end table

@heading Create an Arduino object

@example
ar = arduino ();
@end example

If you have more than one Arduino board connected, you may need to specify the port in order to
connect to the correct device.

@heading Query I2C pins
Display the I2C terminals of the board:

@example
getI2CTerminals(ar)
@end example

@heading Scan the arduino for the connected device

@example
scanI2Cbus(ar)
@end example

The devices listed should contain 0x50, the address of the EEPROM chip.

@heading Create an I2C object to communicate to the EEPROM
@example
eeprom = i2cdev(ar, 0x50)
@end example

@heading Write data to the EEPROM

The EEPROM expects the first byte to be the page number, the second the offset, followed by data,
so to write 1 2 3 4, starting address 0 (page 0, offset 0):

@example
write(eeprom, [0 0 1 2 3 4])
@end example

@heading Reading from the EEPROM

Reading from the EEPROM requires first writing the address to read from, in this case, if we
want to read the 3, 4, this would be page 0, offset 2:

@example
write(eeprom, [0 2])
@end example

Next read the 2 bytes:

@example
data = read(eeprom, 2)
@end example

@c -------------------------------------------------------------------------
@section Using SPI to communicate with a mcp3002 10 bit ADC
@cindex Using SPI to communicate with a mcp3002 10 bit ADC

This example shows using SPI to communicate with an mcp3002 10 bit ADC. Code is available by running:
@example
edit examples/example_spi_mcp3002
@end example

@heading Hardware setup
Using an Arduino UNO, the board should be configured with the following connections between the board and a mcp3002 chip:

@table @asis
@item D10
Connected to pin 1 (CS) of MCP3002
@item D11
Connected to pin 5 (DI) of MCP3002
@item D12
Connected to pin 6 (DO) of MCP3002
@item D13
Connected to pin 7 (CLK) MCP3002
@item VCC
Connected to pin 8 (VDD) MCP3002
@item GND
Connected to pin 4 (VSS) MCP3002
@item Analog input
Connected from pin 2 of the MCP3002 to a LOW (< 5V) voltage to measure
@end table

@heading Create an Arduino object

@example
ar = arduino ();
@end example

If you have more than one Arduino board connected, you may need to specify the port in order to
connect to the correct device.

@heading Create an SPI object to communicate to the MCP3002
@example
adc = spidev(ar, "d10")
@end example

The d10 is the chip select pin connected from the Arduino to the MCP3002.

@heading Read the ADC

The MCP3002 expects specific commands in order to read a channel.

For isslustration for the command to read chan 0 in single ended mode:
@example
command (bits) in MSB mode to device:
[START SGL ODN MSBF X X X X] [ X X X X X X X X ] 
   1    1   0    1   1 1 1 1    1 1 1 1 1 1 1 1 
      [chan 0 ] MSB    
data back:
   X    X  X     X   X 0 D D    D D D D D D D D
@end example

D is a output data bit

X is a dont care what value is input/output

The first byte contains the command and start of the data read back, the second bytes is written to clock out
the rest of the ADC data.

In hex, this corresponds to 0xDF 0xFF,

@example
data = writeRead(adc, [hex2dec("DF") hex2dec("FF")])
@end example

Of the data returned, the last 10 bits is the actual data, so convert data to a 16 bit value:
@example
val = uint16(data(1))*256 + uint16(data(2))
@end example

Then bitand it to remove the non value parts, to get the ADC value:
@example
val = bitand (val, hex2dec('3FF'))
@end example

To make the vaue correspond to a voltage it needs to be scaled as 0 will be 0Volts, 1023 will be 5Volts.
@example
volts = double(val) * 5.0 / 1023.0;
@end example

@c -------------------------------------------------------------------------
@node Function Reference
@chapter Function Reference
@cindex Function Reference

The functions currently available in the Arduino toolkit are described below;

@include functions.texi

@c -------------------------------------------------------------------------

@include gpl.texi

@c -------------------------------------------------------------------------
@node Index 
@unnumbered Index 
 
@printindex cp
 
@bye
